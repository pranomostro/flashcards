Definition Rechensystem als System	offen, dynamisch, technisch
Fähigkeiten Rechensystem	Speicherung/Verarbeitung von Information, Fähigkeit zur Kommunikation
Offenes System	Besteht aus Komponenten mit Abhängigkeit u. externen Schnittstellen
Dynamisches System	Zustände des Systems zu Betrachtungszeitpunkten, / Eigenschaftsänderungen sind Zustandsänderungen, / die das Systemverhalten beschreiben.
3 Strukturtypen von Dateien	Unstrukturiert, in Records, in Bäumen
4 von Betriebssystemen unterstützte Dateitypen	Dateien, Verzeichnisse, Character Special Files, Block Special Files
Character Special Files Beispiele	Serielle I/O Geräte: Terminal, Drucker, Netze
Block Special Files Beispiele	Massenspeicher: Festplatten, CD-ROMS, USB-Speicher, SSDs
2 Arten des Dateizugriffs	Sequential access, Random access
Dateiattribute	Name, Inhalt, Zugriffsrechte, Erstellungsdatum, Modifizierungsdatum
Der Master Boot Record ist in Sektor _	0
Die Aufgabe eines Dateisystems ist _	die Verwaltung von Dateien
3 Methoden für Blockspeicherung	Contiguous, Linked List, i-nodes
Contiguous Allocation: Datei wird als _ verwaltet	zusammenhängende Folge von Blöcken
Vorteile Contiguous Allocation	Einfache Implementierung, Lesen ist sehr performant
Nachteile Contiguous Allocation	Modifikation nicht möglich, Löschen hinterlässt Fragmentierung des Speichers
Linked List Allocation: Die durch die Datei belegten Blöcke werden in _ verwaltet	einer verlinkten Liste
Vorteile Linked List Allocation	Kein Speicherplatzverlust durch Fragmentierung
Nachteile Linked List Allocation	Seeking ist sehr schwierig/langsam, Overhead durch Pointer auf nächsten Block
Linked List Allocation mit FAT ist _	File Allocation Table, Zeiger auf den nächsten Blocke werden in einer Tabelle im Hauptspeicher verwaltet
Beschreibung i-nodes	Jede Datei wird durch die Datenstruktur eines Index-Node (i-node) repräsentiert, / der die Dateiattribute und die Adressen der belegten Blöcke enthält
Vorteile i-nodes	Muss nur für eine geöffnete Datei in den Speicher geladen werden, / Speicherbedarf proportional zur Anzahl von Dateien.
Nachteile i-nodes	begrenzte maximale Dateigröße, begrenzte Anzahl von Dateien in Verzeichnis
2 Optionen zur Verwaltung von Datei-Attributen	Direkt im Verzeichniseintrag, in den i-nodes
2 Haupt-Aufgaben eines Betriebssystems	Abstraktion (Vereinfachung, Bereitstellung von abstrakten Konzepten und gemeinsamen Schnittstellen) / Ressourcenmanagement (Steuern und Kontrollieren der Programmausführung)
4 Betriebsarten von Betriebssystemen	batch processing /  ~ Programm wird vor dem Start komplett definiert und geschlossen ausgeführt /  ~ keine Nutzer-Interaktion / time sharing /  ~ Interaktion zw. Nutzer und Betriebssystem / transaction system /  ~ vgl. Datenbanken / real time system /  ~ hard deadlines: Reaktionszeit darf nicht überschritten werden /  ~ soft deadlines: gewisse Toleranz erlaubt
4 Plattformen von Betriebssystemen	Server, Desktop, Mobil, Eingebettet
Definition Prozess	Programm in Ausführung
Betriebssystem-Modi	Benutzermodus (kein direkter Hardware-Zugriff, Zugriff nur auf virtuelle Adressen) / Systemmodus (direkter Hardware-Zugriff, Zugriff auf Systemcode und Daten)
Black-Box-Sicht auf System:	Sicht von außen, nur Berücksichtigung von Ein-/und Ausgaben
White-Box-Sicht auf System:	Rekursive Aufteilung in Komponenten bzw. Sub-Komponenten
ACID-Kriterien	Atomarität, Konsistenz, Isolation, Dauerhaftigkeit
Klassifikation von Ressourcen	Anzahl der Nutzungen, Parallelität, Dauerhaftigkeit, Zentralität/Peripherität
Aufgabe von Systemaufrufen	Bereitstellen von Schnittstellen zur Hardware durch das Betriebssystem
Ein Systemcall wird durch eine _ realisiert	Trap-Instruktion
2 Betriebssystem-Architekturen	Monolithische Systeme, Mikrokernel-Systeme, Geschichtete Systeme, Client-Server-Systeme, Virtuelle Maschinen
Monolithisches System Beschreibung	Betriebssystem beinhaltet alle Treiber, Dateisystem, Arbeitsspeicherverwaltung etc.
Probleme und Vorteile monolithischer Systeme	Vorteile: Flexibilität, Performance / Probleme: Unübersichtlichkeit, geringe Resilienz, schwere Erweiterbarkeit
Mikrokernel Beschreibung	Sehr kleiner Kernel (wenige 10 000 Zeilen), System in Modulen, nur Kernel läuft im Kernel Mode
Probleme und Vorteile von Mikrokerneln	Vorteile: Sicherer, erweiterbarer, resilienter / Nachteile: Langsamer als monolithisches System
Schritte vom Programm zum ausführbaren Code	Compiler -> Assembler -> Linker -> Loader
Struktur eines Prozesses im Speicher	Stack (wächst von oben runter) / freier Speicher / Heap (wächst von unten nach oben) / Data (globale Variable) / Code
Struktur eines Funktionsaufrufes auf dem Stack	Parameter in umgekehrter Reihenfolge / [Register?] / Return-Adresse / Stack-Base-Pointer / lokale Variablen
Wenn man sich zwischen CPU-Limitation und I/O-Limitation entscheiden muss, wählt man _	I/O-Limitation, weil ein CPU-limitierter Prozess sowohl auf I/O als auch auf die CPU warten muss.
Wenn ein Prozess einen Anteil p seiner Zeit auf Ein-/Ausgabe wartet, ist die / CPU-Auslastung probabilistisch _ bei n Prozessen	1-p^n
Prozess-Zustände	rechenwillig (ready) / rechnend (running) / wartend (blocked) (wartet auf Ressource) / ausgelagert (swapped out) (auf die Festplatte geschrieben)
Prozess-Zustand: ∅ → ready=_	add
Prozess-Zustand: ready → running=_	assign
Prozess-Zustand: ready/blocked/running → swapped out =_	swap out
Prozess-Zustand: running → ready=_	resign
Prozess-Zustand: swapped out → ready/blocked=_	swap in
Prozess-Zustand: running → blocked=_	block
Prozess-Zustand: running → ∅=_	retire
Prozess-Zustand: blocked → ready=_	ready
Definition Thread	Thread ist eine Abstraktion eines physischen Prozessors innerhalb eines Prozesses, / die sich den Adressraum des Prozesses teilen / und jeder einen eigenen Befehlszähler/Registerwerte/Stack haben. / Die restlichen Ressourcen sind im Prozess geteilt.
Kernel-Datenstruktur für einen Prozess und darin gespeicherte Information	Process Control Block (PCB) /  / Registerinhalte, Priorität, / Prozesszustand (wartend/rechnend etc.) / Process ID (PID), Parent PID, Process Group ID (PGID) / Information zur Speicherverwaltung: /  ~ Pointer zu Code- Daten-, und Stack-Segment / Informationen zur Dateiverwaltung: /  ~ Root-Verzeichnis, Dateideskriptoren, Benutzer
Prozesse werden in der Datenstruktur _ verwaltet	Queue, einzeln für running, ready, und blocked
Definition Scheduling	Auswahl des nächsten auszuführenden Prozesses aus der Menge der rechenbereiten Prozesse
Definition Dispatching	Realisiert Prozess-Zustandsübergänge von rechenwillig nach rechnend (und umgekehrt)
Den Eltern-Prozess einer Prozessgruppe nenn man _	Prozessgruppen-Leader
Wann entsteht ein Zombie-Prozess?	Wenn ein Kind- vor dem Eltern-Prozess terminiert.
Eigenschaften eines Zombie-Prozess	Speicher ist de-allokiert, exit()-Status wird in den PCB geschrieben
Wann wird ein Zombie-Prozess entfernt?	Sobald der exit()-Status vom Eltern-Prozess gelesen wurde
Was ist ein Waisen-Prozess	Ein Prozess, dessen Elternprozess vor dem Kind terminiert hat, wird von init() adoptiert
Was muss ein Waisen-Prozess tun, um zum Daemon zu werden?	Sich von der Gruppen-ID und der Benutzer-Id lösen, Dateidesktriptoren umleiten
4 Schritte im Dispatcher	1. Ändert den Zustand des rechnenden Prozesses zu wartend/rechenbereit / 2. Sichert den Kontext des zuvor rechnenden Prozesses im PCB / 3. Lädt den Kontext des rechenbereiten Prozesses/Threads / 4. Ändert den Zustand des rechenbereiten Prozesses zu rechnend
4 Entscheidungssituationen eines Schedulers	1. Wenn ein neuer Prozess erzeugt wird / 2. Wenn ein Prozess terminiert / 3. Wenn ein Prozess blockiert / 4. Wenn ein Interrupt auftritt
3 Implementierungsvarianten von Threads	1. User Space / 2. Kernel Space / 3. Hybride Variante im User- und Kernel Space
Erklärung Hybride von User- und Kernel Space Threading	BS verwaltet Kernel-Threads, n Threads im User-Space werden auf m Kernel-Threads abgebildet (n:m Abbildung)
Arten von Interaktionen zwischen parallelen Programmen	Kausale Beziehung / Kommunikation / Koordinierung / Konkurrenz
Definition Nichtdeterminismus	System zeigt bei gleichen Ausgangsbedingungen und gleichen Eingaben unterschiedlicher Verhalten
Eigenschaften korrekter paralleler Systeme	Determiniertheit /  ~ Bei gleichen Bedingungen entstehen die gleichen Ergebnisse / Störungsfreiheit /  ~ Es gibt eine Reihenfolge, unter der das Ergebnis nicht beeinflusst wird / Wechselseitiger Ausschluss exklusiv nutzbarer Ressourcen /  ~ Maximal ein Prozess greift zu jedem Zeitpunkt auf gemeinsame Ressource zu / Verklemmungsfreiheit / Kein Verhungern /  ~ Es gibt keine Prozesse, deren Ausführung unendlich lange aufgeschoben wird
Definition Race Condition	Mindestens zwei Prozesse greifen lesend oder schreibend auf gemeinsame Ressource zu
Definition Kritischer Abschnitt	In kritischen Abschnitten greifen Prozesse auf gemeinsame Ressource zu
Definition Unterbrechungssperre	Ein Unterbrechungssperre verhindert, dass der aktive Prozess bei einem Interrupt die CPU abgeben muss
Definition Spin-Lock	Aktives Warten eines Prozesses, bis eine belegte Ressource frei wird
Definition passives Warten	Prozess gibt immer wieder die CPU ab, bis der Lock auf der angefragten Ressource frei wird
Definition Semaphore	Ganzzahlige, von mehreren Prozessen geteilte Kontrollvariable
Operationen auf einer Semaphore	Initialisierung, P (down/wait), V (up/signal) -> P/V sind atomar
Definition Mutex	Gemeinsame Variable, die zwei Zustände annehmen kann: unlocked oder locked
Definition Monitor	Zusammenfassung von Daten mit zugehörigen Zugriffsoperationen / → Compiler erzeugt automatisch Semaphore dafür / → Zu jedem Zeitpunkt darf höchstens ein Prozess innerhalb eines Monitors aktiv sein
Definition Deadlock	Ein Zustand, in dem eine Menge von Prozessen auf ein Ereignis wartet, / das nur ein anderer Prozess aus dieser Menge auslösen kann
Bedingungen für Deadlocks	1. Exklusiv nutzbare Ressource / 2. Belegen und Anfordern von weiteren Ressource möglich / 3. Keine Entziehbarkeit von Ressourcen / 4. Zyklisches Warten von Prozessen
Strategien zum Umgang mit Deadlocks	1. Ignorieren / 2. Deadlock-Detection (Erkennen/Beseitigen von Deadlocks, falls diese auftreten) / 3. Deadlock-Prevention (eine der Deadlock-Bedingungen wird außer Kraft gesetzt) / 4. Deadlock-Avoidance (Ressourceverteilungen, die potentiell in einem Deadlock enden, werden nicht durchgeführt)
Algorithmus zum Finden aller Prozesse in einem Deadlock	1. P sei die Menge aller Prozesse / 2. Suche p∈P, dessen Anforderungen momentan erfüllbar sind / 3. Simuliere, dass p seine belegten Ressource wieder freigibt / 4. P:=P\{p}, gehe zu 2 / 5. Falls P=∅, terminiere Suche, keine Deadlocks / 6. Falls P≠∅, ist P die Menge der verklemmten Prozesse
Methoden zur Behebung von Deadlocks	• Abbruch der verklemmten Prozesse / • Ressourcenentzug / • Zurückführung der verklemmten Prozesse auf einen Kontrollpunkt
Beschreibung Bankier-Algorithmus	1. Falls ein Prozess eine Ressourcen-Anforderung hat, teil man die Ressource probeweise zu / 2. Man geht nun von Maximalanforderungen aller anderen Prozesse aus / 3. Ausführung von Deadlock-Erkennung / 4. Falls kein Deadlock auftritt, kann die Zuteilung nun tatsächlich erfolgen
Probleme mit dem Bankiers-Algorithmus	• Ressourcebedarf ist häufig nicht bekannt / • Neue Prozesse können erzeugt werden
Spooling Methode	Ein Spooler-Prozess hat als einziger die Ressource zugeteilt, alle Prozesse nutzen die Ressource über den Spooler / Spooler verwaltet eine Auftragswarteschlange für Aufträge
Geordnete Ressourcen-Anforderung Methode	Festlegen einer linearen Ordnung auf den Ressource, die Ressourcen dürfen nur gemäß dieser Ordnung angefordert werden
Definition Livelock	Zwei Prozesse forden jeweils zwei Ressourcen an, die sie beide dann wieder freigeben, / wenn sie merken, dass die vom anderen belegt sind. Das wird ad infinitum wiederholt.
Definition Starvation	Ein Prozess verhungert, wenn seine Ressourcenanfragen nie erfüllt werden, / da stets andere Prozesse Vorrang haben.
Definition Aktionsstruktur	p=(E,≤,α) heißt Aktionsstruktur von Prozess p, falls /  / 1. Die Ereignismenge E* gilt E⊆E* / 2. ≤ eine partielle Ordnung über E, die die Kausalitätsrelation darstellt. / 3. Die Abbildung α: E→A ist die Aktionsmarkierung des Prozesses p / 4. Die Abbildung α ordnet jedem Ereignis eine Aktion zu.
Man nennt in einem Prozess p=(E,≤,α) zwei Ereignisse e₁,e₂∈E parallel/nebenläufig, falls _	¬(e₁≤e₂∨e₂≤e₁)
Voraussetzungen für Sequentialisierung eines Prozesses	Ereignisse bleiben erhalten / Aktionen bleiben erhalten / Bestehende Reihenfolge bleibt erhalten und wird komplettiert
Definition Nichtdeterministischer endlicher Zustandsautomat	(S,A,S₀,R⊆S×A×S) / S: Menge an Zuständen / A: Menge von Transitionsaktionen / S₀: Menge von möglichen Anfangszuständen / R: Zustandsübergangsrelation
Definition Vorbereich	V(a)⊆S, V(a): Menge der gelesenen Zustandsvariablen, S: Menge der Zustände
Definition Nachbereich	N(a)⊆S, N(a): Menge der geschriebenen Zustandsvariablen, S: Menge der Zustände
Prozess p=(E,≤,α) heißt störungsfrei, wenn	∀e₁,e₂: e₁≤e₂∨e₂≤e₁ oder V(α(e₁))∩N(α(e₂))=∅ ∧ V(α(e₂))∩N(α(e₁))=∅ ∧ N(α(e₁))∩N(α(e₂))=∅ / D.h. Vorbereiche/Nachbereiche der beiden Variablen sind unterschiedlich (Bernstein-Bedingungen)
Definition Petri-Netz	(S,T,F) / S: endliche Menge von Stellen, repräsentiert als Kreise / T: endliche Menge von Transitionen, repräsentiert als Rechtecke / F: Flussrelation F⊆(S×T)∪(T×S)
Definition Vorbereich in Petri-Netz	•x={y|y F x}, F: Flussrelation
Definition Nachbereich in Petri-Netz	x•={y|x F y}, F: Flussrelation
